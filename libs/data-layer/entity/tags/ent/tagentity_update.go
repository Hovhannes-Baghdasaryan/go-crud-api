// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"crud-go-api/libs/data-layer/entity/tags/ent/predicate"
	"crud-go-api/libs/data-layer/entity/tags/ent/tagentity"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// TagEntityUpdate is the builder for updating TagEntity entities.
type TagEntityUpdate struct {
	config
	hooks    []Hook
	mutation *TagEntityMutation
}

// Where appends a list predicates to the TagEntityUpdate builder.
func (teu *TagEntityUpdate) Where(ps ...predicate.TagEntity) *TagEntityUpdate {
	teu.mutation.Where(ps...)
	return teu
}

// SetUUID sets the "uuid" field.
func (teu *TagEntityUpdate) SetUUID(u uuid.UUID) *TagEntityUpdate {
	teu.mutation.SetUUID(u)
	return teu
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (teu *TagEntityUpdate) SetNillableUUID(u *uuid.UUID) *TagEntityUpdate {
	if u != nil {
		teu.SetUUID(*u)
	}
	return teu
}

// SetName sets the "name" field.
func (teu *TagEntityUpdate) SetName(s string) *TagEntityUpdate {
	teu.mutation.SetName(s)
	return teu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (teu *TagEntityUpdate) SetNillableName(s *string) *TagEntityUpdate {
	if s != nil {
		teu.SetName(*s)
	}
	return teu
}

// Mutation returns the TagEntityMutation object of the builder.
func (teu *TagEntityUpdate) Mutation() *TagEntityMutation {
	return teu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (teu *TagEntityUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, teu.sqlSave, teu.mutation, teu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teu *TagEntityUpdate) SaveX(ctx context.Context) int {
	affected, err := teu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (teu *TagEntityUpdate) Exec(ctx context.Context) error {
	_, err := teu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teu *TagEntityUpdate) ExecX(ctx context.Context) {
	if err := teu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teu *TagEntityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tagentity.Table, tagentity.Columns, sqlgraph.NewFieldSpec(tagentity.FieldID, field.TypeInt))
	if ps := teu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teu.mutation.UUID(); ok {
		_spec.SetField(tagentity.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := teu.mutation.Name(); ok {
		_spec.SetField(tagentity.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, teu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	teu.mutation.done = true
	return n, nil
}

// TagEntityUpdateOne is the builder for updating a single TagEntity entity.
type TagEntityUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TagEntityMutation
}

// SetUUID sets the "uuid" field.
func (teuo *TagEntityUpdateOne) SetUUID(u uuid.UUID) *TagEntityUpdateOne {
	teuo.mutation.SetUUID(u)
	return teuo
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (teuo *TagEntityUpdateOne) SetNillableUUID(u *uuid.UUID) *TagEntityUpdateOne {
	if u != nil {
		teuo.SetUUID(*u)
	}
	return teuo
}

// SetName sets the "name" field.
func (teuo *TagEntityUpdateOne) SetName(s string) *TagEntityUpdateOne {
	teuo.mutation.SetName(s)
	return teuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (teuo *TagEntityUpdateOne) SetNillableName(s *string) *TagEntityUpdateOne {
	if s != nil {
		teuo.SetName(*s)
	}
	return teuo
}

// Mutation returns the TagEntityMutation object of the builder.
func (teuo *TagEntityUpdateOne) Mutation() *TagEntityMutation {
	return teuo.mutation
}

// Where appends a list predicates to the TagEntityUpdate builder.
func (teuo *TagEntityUpdateOne) Where(ps ...predicate.TagEntity) *TagEntityUpdateOne {
	teuo.mutation.Where(ps...)
	return teuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (teuo *TagEntityUpdateOne) Select(field string, fields ...string) *TagEntityUpdateOne {
	teuo.fields = append([]string{field}, fields...)
	return teuo
}

// Save executes the query and returns the updated TagEntity entity.
func (teuo *TagEntityUpdateOne) Save(ctx context.Context) (*TagEntity, error) {
	return withHooks(ctx, teuo.sqlSave, teuo.mutation, teuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (teuo *TagEntityUpdateOne) SaveX(ctx context.Context) *TagEntity {
	node, err := teuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (teuo *TagEntityUpdateOne) Exec(ctx context.Context) error {
	_, err := teuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (teuo *TagEntityUpdateOne) ExecX(ctx context.Context) {
	if err := teuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (teuo *TagEntityUpdateOne) sqlSave(ctx context.Context) (_node *TagEntity, err error) {
	_spec := sqlgraph.NewUpdateSpec(tagentity.Table, tagentity.Columns, sqlgraph.NewFieldSpec(tagentity.FieldID, field.TypeInt))
	id, ok := teuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TagEntity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := teuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tagentity.FieldID)
		for _, f := range fields {
			if !tagentity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tagentity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := teuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := teuo.mutation.UUID(); ok {
		_spec.SetField(tagentity.FieldUUID, field.TypeUUID, value)
	}
	if value, ok := teuo.mutation.Name(); ok {
		_spec.SetField(tagentity.FieldName, field.TypeString, value)
	}
	_node = &TagEntity{config: teuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, teuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tagentity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	teuo.mutation.done = true
	return _node, nil
}
